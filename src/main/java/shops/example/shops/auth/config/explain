Road Map of Authentication Flow in my App
+--------------------------------------+
| User Login Request                   |
| (POST /auth/login)                   |
| File: AuthController.java            |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Authenticate User                    |
| - Validate credentials               |
| - Generate JWT token                 |
| File: AuthenticationService.java     |
| - Uses CustomUserDetailsService.java |
| - Uses JwtService.java               |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Return JWT Token                     |
| - JWT token sent to client           |
| File: AuthController.java            |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Client Stores JWT Token              |
| - Local storage, session storage     |
| File: Client-side code               |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Client Makes Authenticated Request   |
| - Include JWT token in Authorization |
|   header (Bearer <token>)            |
| File: Client-side code               |
+--------------------------------------+
              |
              v
+--------------------------------------+
| JwtAuthenticationFilter              |
| - Intercepts request                 |
| - Extracts JWT token from header     |
| - Validates JWT token                |
| - Extracts user details              |
| File: JwtAuthenticationFilter.java   |
| - Uses JwtService.java               |
| - Uses CustomUserDetailsService.java |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Set Authentication in SecurityContext|
| - Create UsernamePasswordAuthToken   |
| - Set in SecurityContextHolder       |
| File: JwtAuthenticationFilter.java   |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Continue Filter Chain                |
| - Pass request to next filter        |
| File: JwtAuthenticationFilter.java   |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Process Request                      |
| - Controller handles request         |
| - Return response to client          |
| File: Any Controller (e.g., ProductController.java) |
+--------------------------------------+



Road Map for JWT Authentication Filter :
Explanation:
Incoming HTTP Request:

The filter intercepts an incoming HTTP request.
Extract Authorization Header:

The filter extracts the Authorization header from the request.
Check if Header is Null or Invalid:

The filter checks if the Authorization header is null or does not start with "Bearer ".
If invalid, the filter continues the filter chain without further processing.
Extract JWT Token:

The filter extracts the JWT token by removing the "Bearer " prefix from the Authorization header.
Extract Username from JWT:

The filter extracts the username from the JWT token using the JwtService.
Check if Username is Not Null and Authentication is Not Set:

The filter checks if the extracted username is not null and if there is no authentication set in the SecurityContext.
Load User Details:

The filter loads the user details from the database using the UserDetailsService.
Validate JWT Token:

The filter validates the JWT token using the JwtService and the loaded user details.
If Valid, Create Auth Token:

If the JWT token is valid, the filter creates an UsernamePasswordAuthenticationToken with the user details and authorities.
Set Authentication in SecurityContext:

The filter sets the authentication token in the SecurityContext.
Continue Filter Chain:

The filter continues the filter chain, allowing the request to proceed to the next filter or target resource.
Handle Exceptions:

If any exceptions occur during the process, the filter uses the HandlerExceptionResolver to handle the exceptions and send an appropriate response.
This flow ensures that requests are authenticated using JWT tokens, providing a stateless authentication mechanism for your application.

+-----------------------------+
| Incoming HTTP Request       |
+-----------------------------+
              |
              v
+-----------------------------+
| Extract Authorization Header|
+-----------------------------+
              |
              v
+-------------------------------------+
| Check if Header is Null or Invalid  |
+-------------------------------------+
              |
              v
+-------------------------------------+
| If Invalid, Continue Filter Chain   |
| (filterChain.doFilter)              |
+-------------------------------------+
              |
              v
+-----------------------------+
| Extract JWT Token           |
| (Remove "Bearer " Prefix)   |
+-----------------------------+
              |
              v
+-----------------------------+
| Extract Username from JWT   |
+-----------------------------+
              |
              v
+-------------------------------------+
| Check if Username is Not Null and   |
| Authentication is Not Set           |
+-------------------------------------+
              |
              v
+-----------------------------+
| Load User Details           |
+-----------------------------+
              |
              v
+-----------------------------+
| Validate JWT Token          |
+-----------------------------+
              |
              v
+-----------------------------+
| If Valid, Create Auth Token |
+-----------------------------+
              |
              v
+-----------------------------+
| Set Authentication in       |
| SecurityContext             |
+-----------------------------+
              |
              v
+-----------------------------+
| Continue Filter Chain       |
| (filterChain.doFilter)      |
+-----------------------------+
              |
              v
+-----------------------------+
| Handle Exceptions           |
| (handlerExceptionResolver)  |
+-----------------------------+



Below is a visual representation of the flow and logic within the SecurityConfiguration class, 
specifically focusing on the securityFilterChain method and the corsConfigurationSource method.

+--------------------------------------+
| SecurityConfiguration Class          |
+--------------------------------------+
              |
              v
+--------------------------------------+
| securityFilterChain Method           |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Configure HttpSecurity               |
+--------------------------------------+
| - Disable CSRF                       |
| - Configure Authorization Rules      |
| - Configure Session Management       |
| - Set Authentication Provider        |
| - Add JWT Authentication Filter      |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Build and Return SecurityFilterChain |
+--------------------------------------+
              |
              v
+--------------------------------------+
| corsConfigurationSource Method       |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Configure CORS                       |
+--------------------------------------+
| - Set Allowed Origins                |
| - Set Allowed Methods                |
| - Set Allowed Headers                |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Register CORS Configuration          |
+--------------------------------------+
              |
              v
+--------------------------------------+
| Return CorsConfigurationSource       |
+--------------------------------------+

Detailed Explanation:
1. SecurityConfiguration Class:
The class is annotated with @Configuration and @EnableWebSecurity, indicating that it provides Spring Security configuration.
2. securityFilterChain Method:
This method configures the security settings for the application.
Disable CSRF:

http.csrf(AbstractHttpConfigurer::disable): Disables CSRF protection, which is typically not needed for stateless APIs using JWT.
Configure Authorization Rules:

authorizeHttpRequests(authorize -> authorize.requestMatchers("/auth/**").permitAll().anyRequest().authenticated()):
Permits all requests to /auth/** endpoints.

Requires authentication for all other requests.
Configure Session Management:

sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)):
Configures the session management to be stateless, meaning no session is maintained between requests.
Set Authentication Provider:

authenticationProvider(authenticationProvider):
Sets the custom authentication provider (e.g., JwtAuthenticationProvider).
Add JWT Authentication Filter:

addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class):
Adds the JwtAuthenticationFilter before the UsernamePasswordAuthenticationFilter in the filter chain.
Build and Return SecurityFilterChain:

return http.build();:
Builds and returns the configured SecurityFilterChain.
3. corsConfigurationSource Method:
This method configures CORS (Cross-Origin Resource Sharing) settings for the application.
Configure CORS:

CorsConfiguration configuration = new CorsConfiguration();:
Creates a new CorsConfiguration object.
Set Allowed Origins:

configuration.setAllowedOrigins(List.of("http://localhost:8005"));:
Specifies the allowed origins for CORS requests.
Set Allowed Methods:

configuration.setAllowedMethods(List.of("GET","POST"));:
Specifies the allowed HTTP methods for CORS requests.
Set Allowed Headers:

configuration.setAllowedHeaders(List.of("Authorization","Content-Type"));:
Specifies the allowed headers for CORS requests.
Register CORS Configuration:

UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
source.registerCorsConfiguration("/**", configuration);:
Registers the CORS configuration for all paths.
Return CorsConfigurationSource:

return source;:
Returns the configured CorsConfigurationSource.
Summary:
Security Configuration:

Disables CSRF protection.
Configures authorization rules to permit /auth/** and require authentication for other requests.
Sets session management to stateless.
Sets the custom authentication provider.
Adds the JWT authentication filter to the filter chain.
CORS Configuration:

Configures allowed origins, methods, and headers for CORS requests.
Registers the CORS configuration for all paths.
This visual representation and detailed explanation provide a clear understanding of the flow and logic within the SecurityConfiguration class.



The 

SessionCreationPolicy.STATELESS

 policy, when used in conjunction with JWT (JSON Web Token) authentication, offers several security advantages over traditional stateful session management. However, it also comes with its own set of considerations. Let's explore why this policy can be more secure and what factors contribute to its security.

### Security Advantages of Stateless JWT Authentication:

1. **No Server-Side Session Storage**:
   - **Advantage**: Since no session data is stored on the server, there is no risk of session data being compromised if the server is breached.
   - **Benefit**: Reduces the attack surface by eliminating the need to store and manage session data on the server.

2. **Token-Based Authentication**:
   - **Advantage**: JWT tokens are self-contained and include all necessary information for authentication and authorization.
   - **Benefit**: Tokens are signed and can include expiration times, reducing the risk of session hijacking and replay attacks.

3. **Scalability**:
   - **Advantage**: Stateless authentication allows the application to scale horizontally easily. Any server instance can handle any request, making it easier to distribute the load.
   - **Benefit**: Improves scalability and performance by eliminating the need for session replication across servers.

4. **Reduced Risk of Session Fixation**:
   - **Advantage**: Since there are no server-side sessions, the risk of session fixation attacks is minimized.
   - **Benefit**: Enhances security by preventing attackers from hijacking a valid session ID.

5. **Simplified Infrastructure**:
   - **Advantage**: Stateless authentication simplifies the infrastructure by removing the need for session storage and management.
   - **Benefit**: Reduces complexity and potential points of failure in the system.

### Example Configuration:

```java


public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http.csrf(AbstractHttpConfigurer::disable)
        .authorizeHttpRequests(authorize -> authorize
            .requestMatchers("/auth/**").permitAll()
            .anyRequest().authenticated())
        .sessionManagement(session -> session
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

    return http.build();
}
```


### Considerations:

1. **Token Expiration and Revocation**:
   - **Challenge**: Managing token expiration and revocation can be more complex compared to server-side sessions.
   - **Solution**: Implement short-lived tokens with refresh tokens and a token revocation mechanism (e.g., token blacklist).

2. **Token Storage on Client**:
   - **Challenge**: Storing tokens securely on the client side is crucial to prevent token theft.
   - **Solution**: Use secure storage mechanisms (e.g., HTTP-only cookies, secure local storage) and implement measures
    to protect against XSS attacks.

3. **Token Size**:
   - **Challenge**: JWT tokens can be larger than session IDs, potentially impacting performance.
   - **Solution**: Optimize token size by including only necessary information and using efficient encoding.

### Summary:

- **Security Advantages**: Stateless JWT authentication offers several security advantages, including no server-side session storage,
 token-based authentication, scalability, reduced risk of session fixation, and simplified infrastructure.
- **Considerations**: Proper management of token expiration, secure storage on the client side, and optimization of token size are
important considerations.
- **Configuration**: The provided configuration ensures that the application uses stateless session management with JWT authentication,
 enhancing security and scalability.

Overall,SessionCreationPolicy.STATELESS with JWT authentication can be more secure than traditional stateful session management, 
 provided that best practices for token management and client-side security are followed.

